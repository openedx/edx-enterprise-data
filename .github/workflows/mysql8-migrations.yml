name: Migrations check on mysql8

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  check_migrations:
    name: check migrations
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8 ]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system Packages
      run: |
        sudo apt-get update
    - name: Get pip cache dir
      id: pip-cache-dir
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip dependencies
      id: cache-dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/pip_tools.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Ubuntu and sql Versions
      run: |
        lsb_release -a
        mysql -V
    - name: Install Python dependencies
      run: |
        pip install -r requirements/dev.txt
        pip uninstall -y mysqlclient
        pip install --no-binary mysqlclient mysqlclient
    - name: Initiate Services
      run: |
        sudo /etc/init.d/mysql start
    - name: Reset mysql password
      run: |
        cat <<EOF | mysql -h 127.0.0.1 -u root --password=root
          UPDATE mysql.user SET authentication_string = null WHERE user = 'root';
          FLUSH PRIVILEGES;
        EOF
    - name: Run migrations
      env:
        DATABASES: default
        DB_ENGINE: django.db.backends.mysql
        DB_USER: root
        DB_PASSWORD: ""
        DB_HOST: localhost
        DB_PORT: 3306
      run: |
        echo "Running the migrations."
        for db in $DATABASES;
        do
          echo "CREATE DATABASE IF NOT EXISTS db_$db;" | sudo mysql -u root
          export DB_NAME=db_$db
          python manage.py migrate --noinput --run-syncdb --database "$db" --settings=enterprise_data.settings.test
        done
